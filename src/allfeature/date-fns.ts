import { constructFromSymbol } from "date-fns/constants";
import {
	parseISO,
	isSameSecond,
	isSameMinute,
	isSameHour,
	isSameDay,
	isSameWeek,
	isSameMonth,
	isSameYear,
	isAfter,
	isBefore,
	getUnixTime,
	startOfSecond,
	startOfMinute,
	startOfHour,
	startOfDay,
	startOfWeek,
	startOfMonth,
	startOfYear,
	endOfSecond,
	endOfMinute,
	endOfHour,
	endOfDay,
	endOfWeek,
	endOfMonth,
	endOfYear,
	setMilliseconds,
	setSeconds,
	setMinutes,
	setHours,
	setDay,
	setWeek,
	setMonth,
	setYear,
	getMilliseconds,
	getSeconds,
	getMinutes,
	getHours,
	getDay,
	getMonth,
	getYear,
	addMilliseconds,
	addSeconds,
	addMinutes,
	addHours,
	addDays,
	addWeeks,
	addMonths,
	addYears,
	subMilliseconds,
	subSeconds,
	subMinutes,
	subHours,
	subDays,
	subWeeks,
	subMonths,
	subYears,
	lightFormat,
	differenceInMilliseconds,
	differenceInSeconds,
	differenceInMinutes,
	differenceInHours,
	differenceInDays,
	differenceInWeeks,
	differenceInMonths,
	differenceInYears,
	formatISO,
} from "date-fns";
constructFromSymbol.toString();

export default function dateFns() {
	const date = parseISO("2022-01-01T00:00:00.000+09:00");
	const now = new Date();

	return {
		comparisons: {
			isSameSecond: isSameSecond(date, now),
			isSameMinute: isSameMinute(date, now),
			isSameHour: isSameHour(date, now),
			isSameDay: isSameDay(date, now),
			isSameWeek: isSameWeek(date, now),
			isSameMonth: isSameMonth(date, now),
			isSameYear: isSameYear(date, now),
			isAfter: isAfter(date, now),
			isBefore: isBefore(date, now),
		},
		timestamps: {
			unixTime: getUnixTime(date),
		},
		startOf: {
			startOfSecond: startOfSecond(date),
			startOfMinute: startOfMinute(date),
			startOfHour: startOfHour(date),
			startOfDay: startOfDay(date),
			startOfWeek: startOfWeek(date),
			startOfMonth: startOfMonth(date),
			startOfYear: startOfYear(date),
		},
		endOf: {
			endOfSecond: endOfSecond(date),
			endOfMinute: endOfMinute(date),
			endOfHour: endOfHour(date),
			endOfDay: endOfDay(date),
			endOfWeek: endOfWeek(date),
			endOfMonth: endOfMonth(date),
			endOfYear: endOfYear(date),
		},
		set: {
			setMilliseconds: setMilliseconds(date, 500),
			setSeconds: setSeconds(date, 30),
			setMinutes: setMinutes(date, 15),
			setHours: setHours(date, 10),
			setDay: setDay(date, 2),
			setWeek: setWeek(date, 5),
			setMonth: setMonth(date, 6),
			setYear: setYear(date, 2025),
		},
		get: {
			milliseconds: getMilliseconds(date),
			seconds: getSeconds(date),
			minutes: getMinutes(date),
			hours: getHours(date),
			day: getDay(date),
			month: getMonth(date),
			year: getYear(date),
		},
		add: {
			addMilliseconds: addMilliseconds(date, 1000),
			addSeconds: addSeconds(date, 10),
			addMinutes: addMinutes(date, 5),
			addHours: addHours(date, 2),
			addDays: addDays(date, 7),
			addWeeks: addWeeks(date, 1),
			addMonths: addMonths(date, 3),
			addYears: addYears(date, 1),
		},
		subtract: {
			subMilliseconds: subMilliseconds(date, 1000),
			subSeconds: subSeconds(date, 10),
			subMinutes: subMinutes(date, 5),
			subHours: subHours(date, 2),
			subDays: subDays(date, 7),
			subWeeks: subWeeks(date, 1),
			subMonths: subMonths(date, 3),
			subYears: subYears(date, 1),
		},
		diff: {
			diffMilliseconds: differenceInMilliseconds(date, now),
			diffSeconds: differenceInSeconds(date, now),
			diffMinutes: differenceInMinutes(date, now),
			diffHours: differenceInHours(date, now),
			diffDays: differenceInDays(date, now),
			diffWeeks: differenceInWeeks(date, now),
			diffMonths: differenceInMonths(date, now),
			diffYears: differenceInYears(date, now),
		},
		others: {
			format: lightFormat(date, "yyyy-MM-dd HH:mm:ss"),
			utcOffset: date.getTimezoneOffset(),
			valueOf: date.valueOf(),
			toDate: new Date(date.valueOf()),
			toJSON: formatISO(date),
			toISOString: formatISO(date),
			toString: date.toUTCString(),
		},
	};
}
